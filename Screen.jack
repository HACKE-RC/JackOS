class Screen{
    static Array twoToThe;
    static bool color;
    function void init(){
        let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = twoToThe[14] + twoToThe[14];
        return;
    }

    function void drawPixel(int x, int y) {
        var int address, value, mask ;

        let address = 32 * y + x / 16;
        let value = Memory.peek(16384 + address);
        let mask = twoToThe[(x - ((x / 16) * 16))]; // x % 16
        if (color){
            do Memory.poke(address, value | mask);  
        } 
        else{
            do Memory.poke(address, value & (~mask))
        } 
        return;
    }

    function void drawLine(int x1, y1, x2, y2) {
        var int x, y, a, b, dx, dy, diff;
        // a = up, b down times
        let x = x1;
        let y = y1;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let diff = 0;

        if (dy = 0){
            while(~(x1 = x2)){
                if (x1 < x2){
                    let x1 = x1 + 1;
                }
                else{
                    let x1 = x1 - 1;
                }

                do Screen.drawPixel(x1, y1);
            }

            do Screen.drawLine(x1, y1);
            return;
        }
        else{
            if (dx = 0){
                while (~(y1 = y2)){
                    if (y1 < y2){
                        let y1 = y1 + 1;
                    }
                    else{
                        let y1 = y1 - 1;
                    }
                    do Screen.drawPixel(x1, y1);
                }
                do Screen.drawPixel(x1, y1);
                return;
            }
        }


        while ((a <= dx) & (b <= dy)){
            do drawPixel(x + a, y + b);
            if (diff < 0) {
                let a = a + 1;
                let diff += dy;
            }
            else{
                let b = b + 1;
                let diff -= dx;
            }
        }
    }
}