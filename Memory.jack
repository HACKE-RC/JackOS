class Memory{
    static Array RAM;
    static Array HEAP;
    static Array freeList;

    function void init(){
        let RAM = 0;
        let HEAP = 2048;
        let freeList = HEAP;
        let HEAP[0] = 0; // heap.next
        let HEAP[1] = 14335; // heap.size
        return;
    }

    function int peek(int address){
        return RAM[address];
    }

    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    function int alloc(int size){
        var int current_size;
        var int allocated_block;
        var Array flist_current_block;
        var int block;
        let flist_current_block = freeList;
        let current_size = flist_current_block[1];
        while (~(flist_current_block = 0) & (current_size < (size + 2))){
            let flist_current_block = flist_current_block[0];
            let current_size = flist_current_block[1];
        }

        if (flist_current_block = 0){
            do Sys.error(5);
        }

        let flist_current_block[1] = (current_size - size - 2);

        let block = (flist_current_block + current_size + 2) - size;
        let flist_current_block = block - 2;
        let flist_current_block[0] = 0;
        let flist_current_block[1] = size;

        return block;
    }

    function void deAlloc(Array arr){
        var Array base;
        let base = arr - 2;
        let base[0] = freeList;
        let freeList = base;
        return;
    }
}